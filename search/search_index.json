{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"MkDocs-nbconvert \u00b6 A MkDocs plug-in that provides a source parser for *.ipynb Jupyter Notebook files. Features \u00b6 doc: https://tanbro.github.io/mkdocs-nbconvert/ ref: https://www.mkdocs.org/user-guide/plugins/","title":"README"},{"location":"index.html#mkdocs-nbconvert","text":"A MkDocs plug-in that provides a source parser for *.ipynb Jupyter Notebook files.","title":"MkDocs-nbconvert"},{"location":"index.html#features","text":"doc: https://tanbro.github.io/mkdocs-nbconvert/ ref: https://www.mkdocs.org/user-guide/plugins/","title":"Features"},{"location":"notebooks/matplotlib.html","text":"Matplotlib \u00b6 import matplotlib.pyplot as plt import numpy as np Simple Plot \u00b6 x = np . linspace ( 0 , 2 , 100 ) plt . plot ( x , x , label = 'linear' ) plt . plot ( x , x ** 2 , label = 'quadratic' ) plt . plot ( x , x ** 3 , label = 'cubic' ) plt . xlabel ( 'x label' ) plt . ylabel ( 'y label' ) plt . title ( \"Simple Plot\" ) plt . legend () plt . show ()","title":"Matplotlib"},{"location":"notebooks/matplotlib.html#matplotlib","text":"import matplotlib.pyplot as plt import numpy as np","title":"Matplotlib"},{"location":"notebooks/matplotlib.html#simple-plot","text":"x = np . linspace ( 0 , 2 , 100 ) plt . plot ( x , x , label = 'linear' ) plt . plot ( x , x ** 2 , label = 'quadratic' ) plt . plot ( x , x ** 3 , label = 'cubic' ) plt . xlabel ( 'x label' ) plt . ylabel ( 'y label' ) plt . title ( \"Simple Plot\" ) plt . legend () plt . show ()","title":"Simple Plot"},{"location":"notebooks/usage.html","text":"Usage \u00b6 mkdocs configration \u00b6 Add the plugin into configration's plugins attribute plugins : - nbconvert Options \u00b6 input_dir : Directory where to scan *.ipynb files Either absolute or relative path. When relative, it's from mkdocs configuration file's directory. When omited, default value is notebooks output_dir : Export notebook files to markdown files in the directory. It MUST be a relative path from doc_dir When omited, default value is notebooks recursive : Whether scan *.ipynb files in subdirectories recursively When omited, default value is false Only availble for Python>=3.5 Options can be add to configuration file as below: plugins : - nbconvert : input_dir : /path/of/notebooks/directory/ recursive : true output_dir : nb Nav \u00b6 In nav section, add *.ipynb files as normal markdown files with replacing extension *.ipynb to *.md , since they're converted to markdown into output_dir . Eg: The project's file structure is: $ tree -L 2 . \u251c\u2500\u2500 AUTHORS.md \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 bdist.linux-x86_64 \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 CHANGELOG.md \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 mkdocs_nbconvert-0.1-py3-none-any.whl \u2502 \u2514\u2500\u2500 mkdocs-nbconvert-0.1.tar.gz \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 README.md -> ../README.md \u251c\u2500\u2500 environment.yml \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 notebooks \u2502 \u251c\u2500\u2500 display_image.ipynb \u2502 \u251c\u2500\u2500 installation.ipynb \u2502 \u2514\u2500\u2500 usage.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 site \u2502 \u251c\u2500\u2500 404 .html \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 notebooks \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u2514\u2500\u2500 sitemap.xml.gz \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 mkdocs_nbconvert \u2502 \u2514\u2500\u2500 mkdocs_nbconvert.egg-info \u251c\u2500\u2500 static \u2502 \u2514\u2500\u2500 img_01.jpeg \u2514\u2500\u2500 .venv Content of mkdocs.yml is: site_name : MkDocs-nbconvert plugins : - nbconvert : input_dir : notebooks output_dir : notebooks nav : - README : README.md - Notebooks : - notebooks/installation.md - notebooks/usage.md - notebooks/display_image.md","title":"Usage"},{"location":"notebooks/usage.html#usage","text":"","title":"Usage"},{"location":"notebooks/usage.html#mkdocs-configration","text":"Add the plugin into configration's plugins attribute plugins : - nbconvert","title":"mkdocs configration"},{"location":"notebooks/usage.html#options","text":"input_dir : Directory where to scan *.ipynb files Either absolute or relative path. When relative, it's from mkdocs configuration file's directory. When omited, default value is notebooks output_dir : Export notebook files to markdown files in the directory. It MUST be a relative path from doc_dir When omited, default value is notebooks recursive : Whether scan *.ipynb files in subdirectories recursively When omited, default value is false Only availble for Python>=3.5 Options can be add to configuration file as below: plugins : - nbconvert : input_dir : /path/of/notebooks/directory/ recursive : true output_dir : nb","title":"Options"},{"location":"notebooks/usage.html#nav","text":"In nav section, add *.ipynb files as normal markdown files with replacing extension *.ipynb to *.md , since they're converted to markdown into output_dir . Eg: The project's file structure is: $ tree -L 2 . \u251c\u2500\u2500 AUTHORS.md \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 bdist.linux-x86_64 \u2502 \u2514\u2500\u2500 lib \u251c\u2500\u2500 CHANGELOG.md \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 dist \u2502 \u251c\u2500\u2500 mkdocs_nbconvert-0.1-py3-none-any.whl \u2502 \u2514\u2500\u2500 mkdocs-nbconvert-0.1.tar.gz \u251c\u2500\u2500 docs \u2502 \u2514\u2500\u2500 README.md -> ../README.md \u251c\u2500\u2500 environment.yml \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 notebooks \u2502 \u251c\u2500\u2500 display_image.ipynb \u2502 \u251c\u2500\u2500 installation.ipynb \u2502 \u2514\u2500\u2500 usage.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 site \u2502 \u251c\u2500\u2500 404 .html \u2502 \u251c\u2500\u2500 css \u2502 \u251c\u2500\u2500 fonts \u2502 \u251c\u2500\u2500 img \u2502 \u251c\u2500\u2500 index.html \u2502 \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 notebooks \u2502 \u251c\u2500\u2500 sitemap.xml \u2502 \u2514\u2500\u2500 sitemap.xml.gz \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 mkdocs_nbconvert \u2502 \u2514\u2500\u2500 mkdocs_nbconvert.egg-info \u251c\u2500\u2500 static \u2502 \u2514\u2500\u2500 img_01.jpeg \u2514\u2500\u2500 .venv Content of mkdocs.yml is: site_name : MkDocs-nbconvert plugins : - nbconvert : input_dir : notebooks output_dir : notebooks nav : - README : README.md - Notebooks : - notebooks/installation.md - notebooks/usage.md - notebooks/display_image.md","title":"Nav"},{"location":"notebooks/installation.html","text":"Installation \u00b6 This MkDocs plugin is based on Jupyter nbconvert . When install the plugin, jupyter and nbconvert will also be installed. Install by pip \u00b6 pip install mkdocs-nbconvert Install from source \u00b6 git clone https://github.com/tanbro/mkdocs-nbconvert.git cd mkdocs-nbconvert pip install .","title":"Installation"},{"location":"notebooks/installation.html#installation","text":"This MkDocs plugin is based on Jupyter nbconvert . When install the plugin, jupyter and nbconvert will also be installed.","title":"Installation"},{"location":"notebooks/installation.html#install-by-pip","text":"pip install mkdocs-nbconvert","title":"Install by pip"},{"location":"notebooks/installation.html#install-from-source","text":"git clone https://github.com/tanbro/mkdocs-nbconvert.git cd mkdocs-nbconvert pip install .","title":"Install from source"},{"location":"notebooks/image.html","text":"Images \u00b6 import json import requests from IPython.display import display , Image display by url \u00b6 base_url = 'https://www.bing.com' img_url = requests . get ( f ' { base_url } /HPImageArchive.aspx?format=js&idx=0&n=1' ) . json ()[ 'images' ][ 0 ][ 'url' ] img_url = f ' { base_url }{ img_url } ' display ( Image ( url = img_url , width = 320 , height = 240 )) display by filename \u00b6 display ( Image ( filename = '../static/img_01.jpeg' ))","title":"Images"},{"location":"notebooks/image.html#images","text":"import json import requests from IPython.display import display , Image","title":"Images"},{"location":"notebooks/image.html#display-by-url","text":"base_url = 'https://www.bing.com' img_url = requests . get ( f ' { base_url } /HPImageArchive.aspx?format=js&idx=0&n=1' ) . json ()[ 'images' ][ 0 ][ 'url' ] img_url = f ' { base_url }{ img_url } ' display ( Image ( url = img_url , width = 320 , height = 240 ))","title":"display by url"},{"location":"notebooks/image.html#display-by-filename","text":"display ( Image ( filename = '../static/img_01.jpeg' ))","title":"display by filename"}]}
{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"mkdocs-nbconvert \u00b6 A MkDocs plug-in provides a source parser for *.ipynb Jupyter Notebook files, base on nbconvert . Features \u00b6 doc: https://tanbro.github.io/mkdocs-nbconvert/ ref: https://www.mkdocs.org/user-guide/plugins/ Build the documentation \u00b6 The project itself's documentation site is a demo of how to use is in MkDocs . To serve it: mkdocs serve -a 127 .0.0.1:8080 Then open http://127.0.0.1:8080 with your browser.","title":"README"},{"location":"index.html#mkdocs-nbconvert","text":"A MkDocs plug-in provides a source parser for *.ipynb Jupyter Notebook files, base on nbconvert .","title":"mkdocs-nbconvert"},{"location":"index.html#features","text":"doc: https://tanbro.github.io/mkdocs-nbconvert/ ref: https://www.mkdocs.org/user-guide/plugins/","title":"Features"},{"location":"index.html#build-the-documentation","text":"The project itself's documentation site is a demo of how to use is in MkDocs . To serve it: mkdocs serve -a 127 .0.0.1:8080 Then open http://127.0.0.1:8080 with your browser.","title":"Build the documentation"},{"location":"notebooks/matplotlib.html","text":"Matplotlib \u00b6 import matplotlib.pyplot as plt import numpy as np Simple Plot \u00b6 x = np . linspace ( 0 , 2 , 100 ) plt . plot ( x , x , label = 'linear' ) plt . plot ( x , x ** 2 , label = 'quadratic' ) plt . plot ( x , x ** 3 , label = 'cubic' ) plt . xlabel ( 'x label' ) plt . ylabel ( 'y label' ) plt . title ( \"Simple Plot\" ) plt . legend () plt . show ()","title":"Matplotlib"},{"location":"notebooks/matplotlib.html#matplotlib","text":"import matplotlib.pyplot as plt import numpy as np","title":"Matplotlib"},{"location":"notebooks/matplotlib.html#simple-plot","text":"x = np . linspace ( 0 , 2 , 100 ) plt . plot ( x , x , label = 'linear' ) plt . plot ( x , x ** 2 , label = 'quadratic' ) plt . plot ( x , x ** 3 , label = 'cubic' ) plt . xlabel ( 'x label' ) plt . ylabel ( 'y label' ) plt . title ( \"Simple Plot\" ) plt . legend () plt . show ()","title":"Simple Plot"},{"location":"notebooks/usage.html","text":"Usage \u00b6 mkdocs configuration \u00b6 Add the plugin into configuration's plugins attribute plugins : - nbconvert Options \u00b6 input_dir : Directory where to scan *.ipynb files Either absolute or relative path. When relative, it's from mkdocs configuration file's directory. When omitted, default value is notebooks output_dir : Export notebook files to markdown files in the directory. It MUST be a relative path from doc_dir When omitted, default value is notebooks recursive : Whether scan *.ipynb files in subdirectories recursively When omitted, default value is false Only available for Python>=3.5 Options can be add to configuration file as below: plugins : - nbconvert : input_dir : /path/of/notebooks/directory/ recursive : true output_dir : nb Nav \u00b6 In nav section, add *.ipynb files as normal markdown files with replacing extension *.ipynb to *.md , since they're converted to markdown into output_dir . For this project, it's directory structure is as below: ! tree - L 2 - I venv \u001b[01;34m.\u001b[00m \u251c\u2500\u2500 \u001b[01;32mAUTHORS.md\u001b[00m \u251c\u2500\u2500 CHANGELOG.md \u251c\u2500\u2500 \u001b[01;32mCONTRIBUTING.md\u001b[00m \u251c\u2500\u2500 \u001b[01;34mdocs\u001b[00m \u2502 \u2514\u2500\u2500 \u001b[01;36mREADME.md\u001b[00m -> ../README.md \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 \u001b[01;34mnotebooks\u001b[00m \u2502 \u251c\u2500\u2500 image.ipynb \u2502 \u251c\u2500\u2500 installation.ipynb \u2502 \u251c\u2500\u2500 matplotlib.ipynb \u2502 \u2514\u2500\u2500 usage.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 \u001b[01;34mrequires\u001b[00m \u2502 \u2514\u2500\u2500 dev.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 \u001b[01;34msite\u001b[00m \u251c\u2500\u2500 \u001b[01;34msrc\u001b[00m \u2502 \u251c\u2500\u2500 \u001b[01;34mmkdocs_nbconvert\u001b[00m \u2502 \u2514\u2500\u2500 \u001b[01;34mmkdocs_nbconvert.egg-info\u001b[00m \u2514\u2500\u2500 \u001b[01;34mstatic\u001b[00m \u2514\u2500\u2500 \u001b[01;35mimg_01.jpeg\u001b[00m 8 directories, 14 files We put markdown files in docs/ , and jupyter notebook files in notebooks/ . The mkdocs.yml of the project is: ! pygmentize mkdocs . yml \u001b[94msite_name\u001b[39;49;00m: MkDocs-nbconvert \u001b[94mrepo_url\u001b[39;49;00m: https://github.com/tanbro/mkdocs-nbconvert \u001b[94muse_directory_urls\u001b[39;49;00m: false \u001b[94mnav\u001b[39;49;00m: - \u001b[94mREADME\u001b[39;49;00m: README.md - \u001b[94mNotebooks\u001b[39;49;00m: - notebooks/installation.md - notebooks/usage.md - notebooks/image.md - notebooks/matplotlib.md \u001b[94mplugins\u001b[39;49;00m: - search - \u001b[94mwith-pdf\u001b[39;49;00m: \u001b[94menabled_if_env\u001b[39;49;00m: ENABLE_PDF_EXPORT - \u001b[94mnbconvert\u001b[39;49;00m: \u001b[94minput_dir\u001b[39;49;00m: notebooks \u001b[94moutput_dir\u001b[39;49;00m: notebooks \u001b[94mtheme\u001b[39;49;00m: \u001b[94mname\u001b[39;49;00m: material \u001b[94mfeatures\u001b[39;49;00m: - navigation.sections - navigation.tabs - navigation.top \u001b[94mpalette\u001b[39;49;00m: - \u001b[94mmedia\u001b[39;49;00m: \u001b[33m\"\u001b[39;49;00m\u001b[33m(prefers-color-scheme:\u001b[39;49;00m\u001b[31m \u001b[39;49;00m\u001b[33mlight)\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m \u001b[94mscheme\u001b[39;49;00m: default \u001b[94mtoggle\u001b[39;49;00m: \u001b[94micon\u001b[39;49;00m: material/weather-night \u001b[94mname\u001b[39;49;00m: switch to dark mode \ud83c\udf19 - \u001b[94mmedia\u001b[39;49;00m: \u001b[33m\"\u001b[39;49;00m\u001b[33m(prefers-color-scheme:\u001b[39;49;00m\u001b[31m \u001b[39;49;00m\u001b[33mdark)\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m \u001b[94mscheme\u001b[39;49;00m: slate \u001b[94mprimary\u001b[39;49;00m: light blue \u001b[94maccent\u001b[39;49;00m: light blue \u001b[94mtoggle\u001b[39;49;00m: \u001b[94micon\u001b[39;49;00m: material/weather-sunny \u001b[94mname\u001b[39;49;00m: switch to light mode \ud83c\udf1e \u001b[94mmarkdown_extensions\u001b[39;49;00m: - pymdownx.extra \u001b[37m### pymdownx.extra replaces markdown.extensions.extra, Here is the full list of included extensions:\u001b[39;49;00m \u001b[37m## pymdownx.betterem\u001b[39;49;00m \u001b[37m## pymdownx.superfences\u001b[39;49;00m \u001b[37m## markdown.extensions.footnotes\u001b[39;49;00m \u001b[37m## markdown.extensions.attr_list\u001b[39;49;00m \u001b[37m## markdown.extensions.def_list\u001b[39;49;00m \u001b[37m## markdown.extensions.tables\u001b[39;49;00m \u001b[37m## markdown.extensions.abbr\u001b[39;49;00m \u001b[37m## markdown.extensions.md_in_html\u001b[39;49;00m - pymdownx.highlight - pymdownx.details - pymdownx.saneheaders - pymdownx.smartsymbols - \u001b[94mpymdownx.critic\u001b[39;49;00m: \u001b[94mmode\u001b[39;49;00m: view - pymdownx.snippets - pymdownx.caret - pymdownx.mark - pymdownx.tilde - pymdownx.smartsymbols \u001b[37m# Officially Supported Extensions\u001b[39;49;00m - admonition - meta \u001b[37m# - sane_lists:\u001b[39;49;00m \u001b[37m# - smarty:\u001b[39;49;00m - \u001b[94mtoc\u001b[39;49;00m: \u001b[94mpermalink\u001b[39;49;00m: true \u001b[94mslugify\u001b[39;49;00m: \u001b[36m!!python/name:pymdownx.slugs.uslugify\u001b[39;49;00m Attention the nav attribute: we write notebook files as notebooks/*.md . Because when building, the plugin call nbconvert to convert them to markdown files, and save *.md files in notebooks dir, then remove converted *.md at the end of building.","title":"Usage"},{"location":"notebooks/usage.html#usage","text":"","title":"Usage"},{"location":"notebooks/usage.html#mkdocs-configuration","text":"Add the plugin into configuration's plugins attribute plugins : - nbconvert","title":"mkdocs configuration"},{"location":"notebooks/usage.html#options","text":"input_dir : Directory where to scan *.ipynb files Either absolute or relative path. When relative, it's from mkdocs configuration file's directory. When omitted, default value is notebooks output_dir : Export notebook files to markdown files in the directory. It MUST be a relative path from doc_dir When omitted, default value is notebooks recursive : Whether scan *.ipynb files in subdirectories recursively When omitted, default value is false Only available for Python>=3.5 Options can be add to configuration file as below: plugins : - nbconvert : input_dir : /path/of/notebooks/directory/ recursive : true output_dir : nb","title":"Options"},{"location":"notebooks/usage.html#nav","text":"In nav section, add *.ipynb files as normal markdown files with replacing extension *.ipynb to *.md , since they're converted to markdown into output_dir . For this project, it's directory structure is as below: ! tree - L 2 - I venv \u001b[01;34m.\u001b[00m \u251c\u2500\u2500 \u001b[01;32mAUTHORS.md\u001b[00m \u251c\u2500\u2500 CHANGELOG.md \u251c\u2500\u2500 \u001b[01;32mCONTRIBUTING.md\u001b[00m \u251c\u2500\u2500 \u001b[01;34mdocs\u001b[00m \u2502 \u2514\u2500\u2500 \u001b[01;36mREADME.md\u001b[00m -> ../README.md \u251c\u2500\u2500 MANIFEST.in \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 \u001b[01;34mnotebooks\u001b[00m \u2502 \u251c\u2500\u2500 image.ipynb \u2502 \u251c\u2500\u2500 installation.ipynb \u2502 \u251c\u2500\u2500 matplotlib.ipynb \u2502 \u2514\u2500\u2500 usage.ipynb \u251c\u2500\u2500 README.md \u251c\u2500\u2500 \u001b[01;34mrequires\u001b[00m \u2502 \u2514\u2500\u2500 dev.txt \u251c\u2500\u2500 setup.py \u251c\u2500\u2500 \u001b[01;34msite\u001b[00m \u251c\u2500\u2500 \u001b[01;34msrc\u001b[00m \u2502 \u251c\u2500\u2500 \u001b[01;34mmkdocs_nbconvert\u001b[00m \u2502 \u2514\u2500\u2500 \u001b[01;34mmkdocs_nbconvert.egg-info\u001b[00m \u2514\u2500\u2500 \u001b[01;34mstatic\u001b[00m \u2514\u2500\u2500 \u001b[01;35mimg_01.jpeg\u001b[00m 8 directories, 14 files We put markdown files in docs/ , and jupyter notebook files in notebooks/ . The mkdocs.yml of the project is: ! pygmentize mkdocs . yml \u001b[94msite_name\u001b[39;49;00m: MkDocs-nbconvert \u001b[94mrepo_url\u001b[39;49;00m: https://github.com/tanbro/mkdocs-nbconvert \u001b[94muse_directory_urls\u001b[39;49;00m: false \u001b[94mnav\u001b[39;49;00m: - \u001b[94mREADME\u001b[39;49;00m: README.md - \u001b[94mNotebooks\u001b[39;49;00m: - notebooks/installation.md - notebooks/usage.md - notebooks/image.md - notebooks/matplotlib.md \u001b[94mplugins\u001b[39;49;00m: - search - \u001b[94mwith-pdf\u001b[39;49;00m: \u001b[94menabled_if_env\u001b[39;49;00m: ENABLE_PDF_EXPORT - \u001b[94mnbconvert\u001b[39;49;00m: \u001b[94minput_dir\u001b[39;49;00m: notebooks \u001b[94moutput_dir\u001b[39;49;00m: notebooks \u001b[94mtheme\u001b[39;49;00m: \u001b[94mname\u001b[39;49;00m: material \u001b[94mfeatures\u001b[39;49;00m: - navigation.sections - navigation.tabs - navigation.top \u001b[94mpalette\u001b[39;49;00m: - \u001b[94mmedia\u001b[39;49;00m: \u001b[33m\"\u001b[39;49;00m\u001b[33m(prefers-color-scheme:\u001b[39;49;00m\u001b[31m \u001b[39;49;00m\u001b[33mlight)\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m \u001b[94mscheme\u001b[39;49;00m: default \u001b[94mtoggle\u001b[39;49;00m: \u001b[94micon\u001b[39;49;00m: material/weather-night \u001b[94mname\u001b[39;49;00m: switch to dark mode \ud83c\udf19 - \u001b[94mmedia\u001b[39;49;00m: \u001b[33m\"\u001b[39;49;00m\u001b[33m(prefers-color-scheme:\u001b[39;49;00m\u001b[31m \u001b[39;49;00m\u001b[33mdark)\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m \u001b[94mscheme\u001b[39;49;00m: slate \u001b[94mprimary\u001b[39;49;00m: light blue \u001b[94maccent\u001b[39;49;00m: light blue \u001b[94mtoggle\u001b[39;49;00m: \u001b[94micon\u001b[39;49;00m: material/weather-sunny \u001b[94mname\u001b[39;49;00m: switch to light mode \ud83c\udf1e \u001b[94mmarkdown_extensions\u001b[39;49;00m: - pymdownx.extra \u001b[37m### pymdownx.extra replaces markdown.extensions.extra, Here is the full list of included extensions:\u001b[39;49;00m \u001b[37m## pymdownx.betterem\u001b[39;49;00m \u001b[37m## pymdownx.superfences\u001b[39;49;00m \u001b[37m## markdown.extensions.footnotes\u001b[39;49;00m \u001b[37m## markdown.extensions.attr_list\u001b[39;49;00m \u001b[37m## markdown.extensions.def_list\u001b[39;49;00m \u001b[37m## markdown.extensions.tables\u001b[39;49;00m \u001b[37m## markdown.extensions.abbr\u001b[39;49;00m \u001b[37m## markdown.extensions.md_in_html\u001b[39;49;00m - pymdownx.highlight - pymdownx.details - pymdownx.saneheaders - pymdownx.smartsymbols - \u001b[94mpymdownx.critic\u001b[39;49;00m: \u001b[94mmode\u001b[39;49;00m: view - pymdownx.snippets - pymdownx.caret - pymdownx.mark - pymdownx.tilde - pymdownx.smartsymbols \u001b[37m# Officially Supported Extensions\u001b[39;49;00m - admonition - meta \u001b[37m# - sane_lists:\u001b[39;49;00m \u001b[37m# - smarty:\u001b[39;49;00m - \u001b[94mtoc\u001b[39;49;00m: \u001b[94mpermalink\u001b[39;49;00m: true \u001b[94mslugify\u001b[39;49;00m: \u001b[36m!!python/name:pymdownx.slugs.uslugify\u001b[39;49;00m Attention the nav attribute: we write notebook files as notebooks/*.md . Because when building, the plugin call nbconvert to convert them to markdown files, and save *.md files in notebooks dir, then remove converted *.md at the end of building.","title":"Nav"},{"location":"notebooks/installation.html","text":"Installation \u00b6 This MkDocs plugin is based on Jupyter nbconvert . When install the plugin, jupyter and nbconvert will also be installed. Install by pip \u00b6 pip install mkdocs-nbconvert Install from source \u00b6 git clone https://github.com/tanbro/mkdocs-nbconvert.git cd mkdocs-nbconvert pip install .","title":"Installation"},{"location":"notebooks/installation.html#installation","text":"This MkDocs plugin is based on Jupyter nbconvert . When install the plugin, jupyter and nbconvert will also be installed.","title":"Installation"},{"location":"notebooks/installation.html#install-by-pip","text":"pip install mkdocs-nbconvert","title":"Install by pip"},{"location":"notebooks/installation.html#install-from-source","text":"git clone https://github.com/tanbro/mkdocs-nbconvert.git cd mkdocs-nbconvert pip install .","title":"Install from source"},{"location":"notebooks/image.html","text":"Images \u00b6 import requests from IPython.display import display , Image display by url \u00b6 base_url = 'https://www.bing.com' img_url = requests . get ( f ' { base_url } /HPImageArchive.aspx?format=js&idx=0&n=1' ) . json ()[ 'images' ][ 0 ][ 'url' ] img_url = f ' { base_url }{ img_url } ' display ( Image ( url = img_url , width = 320 , height = 240 )) display by filename \u00b6 display ( Image ( filename = 'static/img_01.jpeg' ))","title":"Images"},{"location":"notebooks/image.html#images","text":"import requests from IPython.display import display , Image","title":"Images"},{"location":"notebooks/image.html#display-by-url","text":"base_url = 'https://www.bing.com' img_url = requests . get ( f ' { base_url } /HPImageArchive.aspx?format=js&idx=0&n=1' ) . json ()[ 'images' ][ 0 ][ 'url' ] img_url = f ' { base_url }{ img_url } ' display ( Image ( url = img_url , width = 320 , height = 240 ))","title":"display by url"},{"location":"notebooks/image.html#display-by-filename","text":"display ( Image ( filename = 'static/img_01.jpeg' ))","title":"display by filename"}]}